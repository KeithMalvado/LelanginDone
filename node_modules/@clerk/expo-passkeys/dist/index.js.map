{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\nimport type {\n  AuthenticationResponseJSON,\n  CredentialReturn,\n  PublicKeyCredentialCreationOptionsWithoutExtensions,\n  PublicKeyCredentialRequestOptionsWithoutExtensions,\n  PublicKeyCredentialWithAuthenticatorAssertionResponse,\n  PublicKeyCredentialWithAuthenticatorAttestationResponse,\n  RegistrationResponseJSON,\n  SerializedPublicKeyCredentialCreationOptions,\n  SerializedPublicKeyCredentialRequestOptions,\n} from './ClerkExpoPasskeys.types';\nimport ClerkExpoPasskeys from './ClerkExpoPasskeysModule';\nimport {\n  arrayBufferToBase64Url,\n  base64urlToArrayBuffer,\n  ClerkWebAuthnError,\n  encodeBase64Url,\n  mapNativeErrorToClerkWebAuthnErrorCode,\n  toArrayBuffer,\n} from './utils';\n\nconst makeSerializedCreateResponse = (\n  publicCredential: RegistrationResponseJSON,\n): PublicKeyCredentialWithAuthenticatorAttestationResponse => ({\n  id: publicCredential.id,\n  rawId: base64urlToArrayBuffer(publicCredential.rawId),\n  response: {\n    getTransports: () => publicCredential?.response?.transports as string[],\n    attestationObject: base64urlToArrayBuffer(publicCredential.response.attestationObject),\n    clientDataJSON: base64urlToArrayBuffer(publicCredential.response.clientDataJSON),\n  },\n  type: publicCredential.type,\n  authenticatorAttachment: publicCredential.authenticatorAttachment || null,\n  toJSON: () => publicCredential,\n});\n\nexport async function create(\n  publicKey: PublicKeyCredentialCreationOptionsWithoutExtensions,\n): Promise<CredentialReturn<PublicKeyCredentialWithAuthenticatorAttestationResponse>> {\n  if (!publicKey || !publicKey.rp.id) {\n    throw new Error('Invalid public key or RpID');\n  }\n\n  const createOptions: SerializedPublicKeyCredentialCreationOptions = {\n    rp: { id: publicKey.rp.id, name: publicKey.rp.name },\n    user: {\n      id: encodeBase64Url(toArrayBuffer(publicKey.user.id)),\n      displayName: publicKey.user.displayName,\n      name: publicKey.user.name,\n    },\n    pubKeyCredParams: publicKey.pubKeyCredParams,\n    challenge: encodeBase64Url(toArrayBuffer(publicKey.challenge)),\n    authenticatorSelection: {\n      authenticatorAttachment: 'platform',\n      requireResidentKey: true,\n      residentKey: 'required',\n      userVerification: 'required',\n    },\n    excludeCredentials: publicKey.excludeCredentials.map(c => ({\n      type: 'public-key',\n      id: encodeBase64Url(toArrayBuffer(c.id)),\n    })),\n  };\n\n  const createPasskeyModule = Platform.select({\n    android: async () => ClerkExpoPasskeys.create(JSON.stringify(createOptions)),\n    ios: async () =>\n      ClerkExpoPasskeys.create(\n        createOptions.challenge,\n        createOptions.rp.id,\n        createOptions.user.id,\n        createOptions.user.displayName,\n      ),\n    default: null,\n  });\n\n  if (!createPasskeyModule) {\n    throw new Error('Platform not supported');\n  }\n\n  try {\n    const response = await createPasskeyModule();\n    return {\n      publicKeyCredential: makeSerializedCreateResponse(typeof response === 'string' ? JSON.parse(response) : response),\n      error: null,\n    };\n  } catch (error: any) {\n    return {\n      publicKeyCredential: null,\n      error: mapNativeErrorToClerkWebAuthnErrorCode(error.code, error.message, 'create'),\n    };\n  }\n}\n\nconst makeSerializedGetResponse = (\n  publicKeyCredential: AuthenticationResponseJSON,\n): PublicKeyCredentialWithAuthenticatorAssertionResponse => {\n  return {\n    type: publicKeyCredential.type,\n    id: publicKeyCredential.id,\n    rawId: base64urlToArrayBuffer(publicKeyCredential.rawId),\n    authenticatorAttachment: publicKeyCredential?.authenticatorAttachment || null,\n    response: {\n      clientDataJSON: base64urlToArrayBuffer(publicKeyCredential.response.clientDataJSON),\n      authenticatorData: base64urlToArrayBuffer(publicKeyCredential.response.authenticatorData),\n      signature: base64urlToArrayBuffer(publicKeyCredential.response.signature),\n      userHandle: publicKeyCredential?.response.userHandle\n        ? base64urlToArrayBuffer(publicKeyCredential?.response.userHandle)\n        : null,\n    },\n    toJSON: () => publicKeyCredential,\n  };\n};\n\nexport async function get({\n  publicKeyOptions,\n}: {\n  publicKeyOptions: PublicKeyCredentialRequestOptionsWithoutExtensions;\n}): Promise<CredentialReturn<PublicKeyCredentialWithAuthenticatorAssertionResponse>> {\n  if (!publicKeyOptions) {\n    throw new Error('publicKeyCredential has not been provided');\n  }\n\n  const serializedPublicCredential: SerializedPublicKeyCredentialRequestOptions = {\n    ...publicKeyOptions,\n    // @ts-expect-error FIXME\n    challenge: arrayBufferToBase64Url(publicKeyOptions.challenge),\n  };\n\n  const getPasskeyModule = Platform.select({\n    android: async () => ClerkExpoPasskeys.get(JSON.stringify(serializedPublicCredential)),\n    ios: async () => ClerkExpoPasskeys.get(serializedPublicCredential.challenge, serializedPublicCredential.rpId),\n    default: null,\n  });\n\n  if (!getPasskeyModule) {\n    return {\n      publicKeyCredential: null,\n      error: new ClerkWebAuthnError('Platform is not supported', { code: 'passkey_not_supported' }),\n    };\n  }\n\n  try {\n    const response = await getPasskeyModule();\n    return {\n      publicKeyCredential: makeSerializedGetResponse(typeof response === 'string' ? JSON.parse(response) : response),\n      error: null,\n    };\n  } catch (error: any) {\n    return {\n      publicKeyCredential: null,\n      error: mapNativeErrorToClerkWebAuthnErrorCode(error.code, error.message, 'get'),\n    };\n  }\n}\n\nconst ANDROID_9 = 28;\nconst IOS_15 = 15;\n\nexport function isSupported() {\n  if (Platform.OS === 'android') {\n    return Platform.Version >= ANDROID_9;\n  }\n\n  if (Platform.OS === 'ios') {\n    return parseInt(Platform.Version, 10) > IOS_15;\n  }\n\n  return false;\n}\n\n// FIX:The autofill function has been implemented for iOS only, but the pop-up is not showing up.\n// This seems to be an issue with Expo that we haven't been able to resolve yet.\n// Further investigation and possibly reaching out to Expo support may be necessary.\n\n// async function autofill(): Promise<AuthenticationResponseJSON | null> {\n//   if (Platform.OS === 'android') {\n//     throw new Error('Not supported');\n//   } else if (Platform.OS === 'ios') {\n//     throw new Error('Not supported');\n//   } else {\n//     throw new Error('Not supported');\n//   }\n// }\n\nexport const passkeys = {\n  create,\n  get,\n  isSupported,\n  isAutoFillSupported: () => {\n    throw new Error('Not supported');\n  },\n};\n"],"mappings":"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","names":["ClerkExpoPasskeys"]}